{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some consideration before starting:\n",
    "-Edit cifar10.py file, setting the directory where CIFAR10 dataset is located."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import time\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import tensorflow as tf\n",
    "\n",
    "from cifar10 import CIFAR10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sess = tf.InteractiveSession()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Load dataset\n",
    "cifar10 = CIFAR10(batch_size=100, validation_proportion=0.1)\n",
    "\n",
    "SUMMARIES_DIR = './summaries'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Model blocks\n",
    "def conv_layer(input_tensor, kernel_shape, layer_name):\n",
    "    # input_tensor b01c\n",
    "    # kernel_shape 01-in-out\n",
    "    weights = tf.get_variable(\"weights\", kernel_shape,\n",
    "                               initializer = tf.contrib.layers.xavier_initializer_conv2d())\n",
    "    biases = tf.get_variable(\"biases\", [kernel_shape[3]],\n",
    "                             initializer=tf.constant_initializer(0.0))\n",
    "    \n",
    "    tf.histogram_summary(layer_name + \"/weights\", weights)\n",
    "    tf.histogram_summary(layer_name + \"/biases\", biases)\n",
    "    \n",
    "    # Other options are to use He et. al init. for weights and 0.01 \n",
    "    # to init. biases.\n",
    "    conv = tf.nn.conv2d(input_tensor, weights, \n",
    "                       strides = [1, 1, 1, 1], padding='SAME')\n",
    "    return tf.nn.relu(conv + biases)\n",
    "\n",
    "def fc_layer(input_tensor, weights_shape, layer_name):\n",
    "    # weights_shape in-out\n",
    "    weights = tf.get_variable(\"weights\", weights_shape,\n",
    "                              initializer = tf.contrib.layers.xavier_initializer())\n",
    "    biases = tf.get_variable(\"biases\", [weights_shape[1]],\n",
    "                             initializer=tf.constant_initializer(0.0))\n",
    "    tf.histogram_summary(layer_name + \"/weights\", weights)\n",
    "    tf.histogram_summary(layer_name + \"/biases\", biases)\n",
    "    mult_out = tf.matmul(input_tensor, weights)\n",
    "    return tf.nn.relu(mult_out+biases)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor 'ScalarSummary:0' shape=() dtype=string>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Model\n",
    "model_input = tf.placeholder(tf.float32, name='model_input')\n",
    "tf.image_summary('input', model_input, 10)\n",
    "\n",
    "keep_prob = tf.placeholder(tf.float32, name='dropout_prob')\n",
    "\n",
    "target = tf.placeholder(tf.float32, name='target')\n",
    "\n",
    "layer_name = 'conv1'\n",
    "with tf.variable_scope(layer_name):\n",
    "    conv1_out = conv_layer(model_input, [5, 5, 3, 64], layer_name)\n",
    "\n",
    "pool1_out = tf.nn.max_pool(conv1_out, ksize=[1, 2, 2, 1],\n",
    "                          strides=[1, 2, 2, 1], padding='SAME',\n",
    "                          name='pool1')\n",
    "\n",
    "layer_name = 'conv2'\n",
    "with tf.variable_scope(layer_name):\n",
    "    conv2_out = conv_layer(pool1_out, [5, 5, 64, 64], layer_name)\n",
    "    \n",
    "pool2_out = tf.nn.max_pool(conv2_out, ksize=[1, 2, 2, 1],\n",
    "                          strides=[1, 2, 2, 1], padding='SAME',\n",
    "                          name='pool2')\n",
    "\n",
    "pool2_out_flat = tf.reshape(pool2_out, [-1, 8*8*64], name='pool2_flat')\n",
    "\n",
    "layer_name = 'fc1'\n",
    "with tf.variable_scope(layer_name):\n",
    "    fc1_out = fc_layer(pool2_out_flat, [8*8*64, 512], layer_name)\n",
    "\n",
    "fc1_out_drop = tf.nn.dropout(fc1_out, keep_prob)\n",
    "\n",
    "layer_name = 'fc2'\n",
    "with tf.variable_scope(layer_name):\n",
    "    fc2_out = fc_layer(fc1_out_drop, [512, 10], layer_name)\n",
    "    \n",
    "cross_entropy = tf.reduce_mean(\n",
    "    tf.nn.softmax_cross_entropy_with_logits(fc2_out, target,\n",
    "                                           name='cross_entropy'))\n",
    "tf.scalar_summary('cross_entropy', cross_entropy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Optimization\n",
    "optimizer = tf.train.AdamOptimizer(1e-4)\n",
    "grads_vars = optimizer.compute_gradients(cross_entropy)\n",
    "optimizer.apply_gradients(grads_vars)\n",
    "train_step = optimizer.minimize(cross_entropy)\n",
    "\n",
    "\n",
    "# Metrics\n",
    "correct_prediction = tf.equal(tf.argmax(fc2_out, 1),\n",
    "                             tf.argmax(target, 1))\n",
    "accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32), name='accuracy')\n",
    "tf.scalar_summary('accuracy', accuracy)\n",
    "\n",
    "# Useful training functions\n",
    "def validate():\n",
    "    data, labels = cifar10.getValidationSet()\n",
    "    acc = sess.run((accuracy),\n",
    "                   feed_dict={\n",
    "            model_input: data,\n",
    "            target: labels,\n",
    "            keep_prob: 1.0\n",
    "        })\n",
    "    return acc\n",
    "def test():\n",
    "    data, labels = cifar10.getTestSet()\n",
    "    acc = sess.run((accuracy),\n",
    "                   feed_dict={\n",
    "            model_input: data,\n",
    "            target: labels,\n",
    "            keep_prob: 1.0\n",
    "        })\n",
    "    return acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "Trainable variables\n",
      "conv1/weights:0\n",
      "conv1/biases:0\n",
      "conv2/weights:0\n",
      "conv2/biases:0\n",
      "fc1/weights:0\n",
      "fc1/biases:0\n",
      "fc2/weights:0\n",
      "fc2/biases:0\n",
      "Epoch 0, loss 2.329758\n",
      "Validation accuracy 0.106200\n",
      "Test_accuracy 0.143200\n",
      "Epoch 1, loss 1.460623\n",
      "Validation accuracy 0.252400\n",
      "Test_accuracy 0.519900\n",
      "Epoch 2, loss 1.263274\n",
      "Validation accuracy 0.302800\n",
      "Test_accuracy 0.574400\n"
=======
      "Epoch 0, loss 2.315431\n",
      "Validation accuracy 0.140600\n",
      "Time elapsed 0.222548317909 minutes\n",
      "Epoch 1, loss 1.526580\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-7-a1686a858f0c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     24\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mbatch_idx\u001b[0m\u001b[1;33m==\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     25\u001b[0m         \u001b[1;32mprint\u001b[0m \u001b[1;34m\"Epoch %d, loss %f\"\u001b[0m \u001b[1;33m%\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 26\u001b[1;33m         \u001b[0mvalidation_accuracy\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     27\u001b[0m         \u001b[1;32mprint\u001b[0m \u001b[1;34m\"Validation accuracy %f\"\u001b[0m\u001b[1;33m%\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalidation_accuracy\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     28\u001b[0m         \u001b[1;32mprint\u001b[0m \u001b[1;34m\"Time elapsed\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mtime\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mt_i\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m/\u001b[0m\u001b[1;36m60.0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"minutes\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-6-10c9458cbbae>\u001b[0m in \u001b[0;36mvalidate\u001b[1;34m()\u001b[0m\n\u001b[0;32m     15\u001b[0m             \u001b[0mmodel_input\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m             \u001b[0mtarget\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 17\u001b[1;33m             \u001b[0mkeep_prob\u001b[0m\u001b[1;33m:\u001b[0m \u001b[1;36m1.0\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     18\u001b[0m         })\n\u001b[0;32m     19\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0macc\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/home/ignacio/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36mrun\u001b[1;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[0;32m    715\u001b[0m     \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    716\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[1;32m--> 717\u001b[1;33m                          run_metadata_ptr)\n\u001b[0m\u001b[0;32m    718\u001b[0m       \u001b[1;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    719\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/home/ignacio/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_run\u001b[1;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[0;32m    913\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    914\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[1;32m--> 915\u001b[1;33m                              feed_dict_string, options, run_metadata)\n\u001b[0m\u001b[0;32m    916\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    917\u001b[0m       \u001b[0mresults\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/home/ignacio/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_do_run\u001b[1;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[0;32m    963\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[1;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    964\u001b[0m       return self._do_call(_run_fn, self._session, feed_dict, fetch_list,\n\u001b[1;32m--> 965\u001b[1;33m                            target_list, options, run_metadata)\n\u001b[0m\u001b[0;32m    966\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    967\u001b[0m       return self._do_call(_prun_fn, self._session, handle, feed_dict,\n",
      "\u001b[1;32m/home/ignacio/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_do_call\u001b[1;34m(self, fn, *args)\u001b[0m\n\u001b[0;32m    970\u001b[0m   \u001b[1;32mdef\u001b[0m \u001b[0m_do_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    971\u001b[0m     \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 972\u001b[1;33m       \u001b[1;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    973\u001b[0m     \u001b[1;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    974\u001b[0m       \u001b[0mmessage\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcompat\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mas_text\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0me\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmessage\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/home/ignacio/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_run_fn\u001b[1;34m(session, feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[0;32m    952\u001b[0m         return tf_session.TF_Run(session, options,\n\u001b[0;32m    953\u001b[0m                                  \u001b[0mfeed_dict\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 954\u001b[1;33m                                  status, run_metadata)\n\u001b[0m\u001b[0;32m    955\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    956\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_prun_fn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msession\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
>>>>>>> 890393554e67c51b1bad4263c9757fdec54296d8
     ]
    }
   ],
   "source": [
    "# Train model\n",
    "merged = tf.merge_all_summaries()\n",
    "train_writer = tf.train.SummaryWriter(SUMMARIES_DIR,\n",
    "                                     sess.graph)\n",
    "sess.run(tf.initialize_all_variables())\n",
    "cifar10.reset()\n",
    "print \"Trainable variables\"\n",
    "for n in tf.trainable_variables():\n",
    "    print n.name\n",
    "\n",
    "epochs = 3\n",
    "mean_gradients = np.zeros([len(tf.trainable_variables()),epochs])\n",
    "std_gradients = np.zeros([len(tf.trainable_variables()),epochs])\n",
    "\n",
    "t_i = time.time()\n",
    "n_batches = cifar10.n_batches\n",
    "while cifar10.getEpoch()<epochs:\n",
    "    epoch = cifar10.getEpoch()\n",
    "    batch, batch_idx = cifar10.nextBatch()\n",
    "    batch_data = batch[0]\n",
    "    batch_labels = batch[1]\n",
<<<<<<< HEAD
    "    _, loss, grads = sess.run((train_step, cross_entropy, grads_vars), \n",
=======
    "    summary, _, loss = sess.run((merged, train_step, cross_entropy), \n",
>>>>>>> 890393554e67c51b1bad4263c9757fdec54296d8
    "                      feed_dict={\n",
    "            model_input: batch_data,\n",
    "            target: batch_labels,\n",
    "            keep_prob: 0.5\n",
    "        })\n",
<<<<<<< HEAD
    "    for layer in range(len(tf.trainable_variables())):\n",
    "        mean_gradients[layer,epoch] = np.mean(np.abs(grads[layer][0]))\n",
    "        std_gradients[layer,epoch] = np.std(np.abs(grads[layer][0]))\n",
    "    #for elem in grads[0]:\n",
    "    #    print elem.shape\n",
    "        \n",
=======
    "    step = batch_idx+epoch*n_batches\n",
    "    if step%10==0:\n",
    "        train_writer.add_summary(summary, step)\n",
>>>>>>> 890393554e67c51b1bad4263c9757fdec54296d8
    "    if batch_idx==0:\n",
    "        print \"Epoch %d, loss %f\" %(epoch, loss)\n",
    "        validation_accuracy = validate()\n",
    "        print \"Validation accuracy %f\"%(validation_accuracy)\n",
<<<<<<< HEAD
    "        test_accuracy = test()\n",
    "        print \"Test_accuracy %f\"%(test_accuracy)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/lib/pymodules/python2.7/matplotlib/collections.py:548: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  if self._edgecolors == 'face':\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nRKTpKyoqoqioKGDZ5s37Yn6c+oSY0cAvg5aNAv7rWj+e+IWYcmz48zDgNdfyocCrYbb5CBgetGwY\nNnza3R/mp1jH4GHYTMS1uuuuRxk1ql9ktU6wqiqbdC2ScBJqqnp3CMnPDz9VffPmoY8vIiJHn1Bf\n7OfNW8no0f1jepz6hJiTgVWu54cIDAIf459rJV4ewW40uRy72eRNQA7+mYKnA8djrUY4y28DZmCj\nmgYBY4GrXPv8X2AKNgR7I/6WmxJqjrxKGgcPRj5VfUVF4Lbt2/tDSE4ODBgQOpy0b69WExERSV71\nCTHHAu5JzjOD1qcGrY+Hl7CbT04COmOh6hL8c8RkA11d5dc762dirURbgNsJbLm5BRuN9MegY00G\nHoxl5etSXQ179kQWTvYFtco1axbY6bVfv/BT1bds2ZivSkREJD7qE2I2Y3PDfBFmfV+nTLzNwj/M\nO9j1IZa9D9TWftW9wTWqQ3l5ZFPVb99ec6r6tm0DQ8i3vx06nHTooEnXREQkuRQVF1O0YwcA68rW\nxnz/9QkxC7DLLn/FOvO6ZWAtF3+NTbWSn2+q+uCZX0OFkz1BM86kpgZOVd+3LwwdGnqq+oyMxLw+\nERGRhirMyqIwy8bjTP3XvtpHzUShPiFmOnAFsAZ4An+LTE+s30kzak5E1yRNmAA33FBzqvrWrQND\nSJ8+4aeq16RrIrHh/qa340AV/P4g4w60pNMqa5os7NTpyH+iItK01CfEbAfOxu49NB0bVg1QDfwN\nuzHj9pjWLkkNGgQXXlgznLRuneiaiRx93N/05n1cwtJuK7i9ZW9G9W2T4JqJSLzVd8ber4CLsc61\nJzvL/gPsjmWlkt26EWv5v3ybia2wUyfO1bc8ERGRRhfNbQfAQstRFVzcrmzRhZ/17ZvoaoiIiBzV\nNJ5FREREPEkhRkRERDxJIUZEREQ8SSFGREREPEkhRkRERDxJIUZEREQ8SSFGREREPEkhRkRERDxJ\nIUZEREQ8SSFGREREPEkhRkRERDxJIUZEREQ8SSFGREREPEkhRkRERDxJIUZEREQ8SSFGREREPEkh\nRkRERDxJIUZEREQ8SSFGREREPEkhRkRERDxJIUZEREQ8SSFGREREPEkhRkRERDxJIUZEREQ8SSFG\nREREPEkhRkRERDxJIUZEREQ8SSFGREREPMmLIWYcsA4oA5YD59RRfjCwwin/X+DmoPV9gFecfVYB\n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\nRERERERERERERERERERERERERERERETEs/4/VCoB9upBaScAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f19a8aa9b90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjEAAAGFCAYAAAAM3KIKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAIABJREFUeJzs3Xt8FNXB//HPJiSQcIsQSNBwEQjlIj4KUvBKlIJKRbxU\nYQEFsVYu2oK2PogVRSnY+kPooxW0FiyCEa31DoiPaG2r3H0UBQQVCAiEOwUSCLn8/jiz2Utmk+xm\nN7sTvu/Xa1/ZnTkzczbLMt+cc+YMiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI\niIiIiIiIiIiIhGMUUBrw2Ad8BPzUpnwpMKW2KhclTYBJwCrgMFAE7AXeB8YCKbVUj3aY3+dIn2WP\nWsuiKcU6Tt9qls/B1OmmKNXHY5R1nB5RPo5IXKoX6wqIONgoYDPgAloB9wDvANcD7/qU6wPsqu3K\nRVA2sAxoATwHPI4JMq2Aa4CnrOe1GdTKfJ7/GVgS5eM1xLy/UuAfUT6WiFSTQoxI+L4C1vu8XoY5\nuQ/FP8Ssrs1KRVg94E0gDegFfBOw/m/AY8CFVewnCRMASiJdQeAH61EbXLV0nLqsAXAy1pWQuiEh\n1hUQqUNOAaeth69S4BGf1+nAs8DXwDEgH/gQuMxmn2OBL6xy/wE2Ab8LKJOJaSHZadXhe0yrQWIY\n+wp0I9DFKhcYYDzygLd8Xudg3vMIYCYmYJwEOhDaez8beNWq6xHgFeu9BnoU++6kIcBnwHHrWMuA\nCwLKvGit64BpzTlmvZ//ByRbZdphugvBfI6eLsR5NscMlIJpqdoDFAAfB9ThNmtffWy2nYLptrN7\nz6Goj/kcPsf8Hg8Cn2JaDH19iPk3EcgFfAu857MsGfgtpiXyJOb3Mw/z+frajmmdvMk6fiHO71oV\nEXG0UZgTz48xLRVJQBbwR0yA6R9QPnBMTCfMiXwocAVwLaZLpBj/MRdDrW1nA/2AK4FfALN8ymRi\nTrrfAz+3yjyEOVnMC3Ffdp63tutYRTlfOdY2O4HFmHFC1wJnUf33ngJsBA4B44CfWHXfYe37dp+y\nj1KxhWeytezP1jFuAP6NCSldfMq9iDkJbwQmYn4vnv09bJVJBgZYx30e87n/GDi3Gr+DHcDfgYHA\nMGALJkh4tk3CBJyXAravhwl/r1RyDKjemJgmmPd5m1Wv/sAfMP9Wb/Mpd721r34B2w+0ll9jvU4A\nlmJ+l78FrgJGYz7vrzAtLR7brPfxLWYc0xVAzyrek4iIRNEoKg7sLcUEh7ttylc1sDcRc9L6AHjd\nZ/nTmJN4ZeYCRzEhytd91nE7h7AvO0sxJ/Qkm3X1fB6+rT451rE/qsb+g733MdY+rgso/xz2Ica3\nJaY15gQ9O2DbhsBu/IPBi9a2NweUfRf/Vol0QhugnWOVD+xKbINpLXveZ9kjmCDVwmfZrdb2di1U\nvkYR+sBez+/8BWCdz3IX8B3wRkD5JZjw5eEJxIMDyvW0lo/xWbYd8347hFA/kWpTd5JI+G4DLrIe\n1wB/xbQyjK/GtmMw42kKMSfcIsxfwJ19yqzCjEV5GXPCCGyqB3OS/wjz17xvqFhmrfe0blRnX6GY\nYNXZ8/g/mzKv2yyD6r33KzHdSO8GbPtyNep2NeZE/RL+v5NTwCeYgOGrDNPl4WsD0LYax6pKbsDr\nPExXzpU+y+ZaP+/yWXYPpuvvXxGoA8AteFuiPL/z0fj/zsuAZzD/plpbyzpgfp/P+pS7DjP26z38\nf79fYLoHcwKOvQETjkQiTiFGJHybMCfj9cByzMl5Oaapvmkl292HOSl8hhkr0BszaHYZ/pcqL8Sc\naNpiBtDmAysxXSseGZhuAM+JyfP4CnNSSg9hX3byMH+htwtYvggT3npZ77+MivbYLKvue29u1TGQ\n3bJAGdbPNfj/ToowLRzNA8qfsNb5OoV/t0i49tosyweaBbx+FdOKlwCcj2mB+VMEjg/m97wY090z\nHDP+5iJMd2PgpfF/wYRLT2vKeMxYHt+uyQxM12Dg77bIWhf4+7X7dyASEbo6SSSyNmD+cs0G1gYp\nMwLTehLYYtPEpuyL1iMF06oyFdM6kY05Ke3H/AX8UJBj+Z5Agu2rEyas2FmOaSG4HjM41GO/9QAz\ncLYZFdkFm+q+94OYcBOoOoNcD1g/b8aMSalKNK84amWzLBPz/nz9D+Z3MxgzhucwJihGwgjMmKmh\nAcsbUPEz+g+wADO+6kngDkzr1398yhzA1P/qIMc7FvDa7t+BSEQoxIhE1gWY/7T3VVKmlIp/+Z8P\nXEzwk24hprWiPmbMQjdMiHkXM/Dye8yA0eoI3FdXgoeYNzCDXidbxwp2hVJ1g0B13/sKTBfIIPy7\neoZV4xjLMAOFO1JxfIed6pxkT1k/Q53Uz425OsmjLXAJJkz6Wotpnfpv4DzM2J/CEI8VTCkVr5jL\npOKYFo//wVzJ9ndMi+IzAevfwVz5VQ9nTx8gdYBCjEj4uuO9DLc5ptn+J5j//IOFAjBh4GHMgNRP\ngB9Zr7/H/zv5Z0xT/qeYFpVM4EFMWFljlZmCudrkU8zJZwvmL+x2mL/o78YMZq3OvuyUYq7seR9z\nwvozZrK3w5gxNr0xIWRjJfsI570vwFwttADTyvQtJqwNqMYxdmB+L78D2lt1P4x5z70wLUeP+pSv\nTgA7Zu33BkzAOoxpiaqqpaclJkj9GfP7mor5HGbYlP0fzBiaUkLvSuqHea+B3sP8zm+y9vk6ZrzL\nbzH/LrJtttmCaYG7GvgnpnXR1yuYbqklmCvy1mBCUhZmPMxbmLmFREQkDo2k4pVJhzFXevyKilfy\nBF7VkoQZN7MTc0Jbg2lxmI85mXvcBvwvJnScxMz6m4tphfHVHHMlzneYFoMDmIG8jwGpIe4rmMZ4\nbztwBO9tB5Zhxk/4jh/JwVzRZDflfnXfO5h5Yl7DdGUcxYwb6UPFq5MewX4Svesxc58cwbRqbMOM\nDfEdVDsf/66SyvZ5FeYzLqTqeWJyrO2HYT6bfGu7jwk+MWAy5rN5L8h6O3b/Fj2PEszVUAAPYH6/\nhZjxUqMJ/nvz3e8tQdYnYsY3fY75HP+DCbLP4h+mtgFvh/B+RERExIEG4T8fSyy9jgmagRMmikgN\njMMk+0JMH3JlcyhkYgakfYP5a6OqSb08cx9Upw9dRCRSumK6/rbgP29LbUvGjE36Feb/zF/GsC4i\ndc4QTFP5aEw/+ixMP3XrIOXbYppxR2AuAX0qSDkw4wd2Yvr6/x6Z6oqIVMtHmO65zzBXisVKO7xd\no39C94kSiahVVBzsthGYXo1tPyJ4iEnETAJ1B6Z/XC0xIiIiDuCUye6SMdNqLw9YvhxzuWJNTMEM\nUJyP/vIQERFxDKdcYp2OaTEJnK1zHzW7w+tlmO6p/7Jel6GJmURERBzBKSEmGhpj7q1yF94b47mo\nujWmFfazcIqIiEjl9hDBW1E4JcQcwIyWzwhYnkH4v4wOmMG/vrOBerrXTmMG2G0L2KbV2WefvXv3\n7t1hHlJEROSM9gNm0smIBBmnhJgizKWHAzCzQXr0J/yBuJsw03t7uIBpQCPMJYa7bLZptXv3bhYu\nXEiXLl3CPKzEkwkTJjB79uxYV0MiSJ9p3aLPs+7YtGkTI0aMOAfTm3FGhRgwVxe9hJkfZiXwC8w0\n157b2M/AzPA50mebC6yfjTHTf1+ACUQbMZdrB06VftT6WekU6l26dKFHjx5hvQmJL2lpafos6xh9\npnWLPk+pjJNCzKuY6dWnYFLcBsy9VHZa6zOpOGfMeutnGebqpmHAduzvMeIpp4G9IiIiDuCkEAMw\nx3rYucNmWaiXkNvtQ0REROKQU+aJEREREfGjECNnNLfbHesqSITpM61b9HlKZZzWnSQSUfoPsu7R\nZ1q3XHTRRaxfv77qghIXGjduTHZ2dq0dTyFGRETi0tatW+nUKZb3xJRwbNmypdaCjEKMiIjEpWPH\njgFobi6HsOaBKf/caoNCjIiIxDXNzSXBaGCviIiIOJJCjIiIiDiSQoyIiIg4kkKMiIiIOJJCjIiI\niJT717/+xc9//nN69uxJ/fr1SUhIIC8vL9bVsqUQIyIiIuVWrFjBhx9+SLt27bj00ktxuVyxrlJQ\nCjEiIiJS7uGHH2bbtm28/vrrDBw4kLKyslhXKSiFGBERkRjYvHkzbrebzMxMGjRoQNu2bRk5ciRF\nRUUAfPXVVwwePJhmzZqRkpLChRdeyIIFC/z28fHHH5OQkMArr7zCQw89xDnnnEPTpk3p378/W7Zs\nKS83ceJEGjVqZDsR3dChQ8nMzKSkpAQgrlteAinEiIiI1LIvvviCXr16sXr1ah5//HGWLVvGjBkz\nKCoq4vTp03zzzTdccsklbNq0iaeffpo33niDrl27MmrUKJ588skK+5s8eTI7d+7kL3/5C88//zxb\nt25l0KBBlJaWAjB69GgKCgp49dVX/bY7cuQIb775JrfddhuJiYm18t4jSTP2iohInVBQAJs3R/cY\nnTtDamrN93PfffeRnJzM6tWrad68efnyYcOGAfDoo49SXFzMRx99xDnnnAPANddcw5EjR5g6dSp3\n3303TZo0Kd+uW7dufq00iYmJ3HrrraxZs4bevXvTvXt3evTowfz587nzzjvLy+Xm5lJUVMQdd9xR\n8zcVAwoxIiJSJ2zeDD17RvcY69ZBTe+AUFBQwD/+8Q/uuusuvwDja8WKFfTr1688wHiMGjWKpUuX\nsnLlSgYMGFC+/Prrr/cr1717dwDy8vLo3bs3YFpj7rnnHrZu3Vp+g8b58+fTq1cvunbtWrM3FSMK\nMSIiUid07mxCRrSPUVOHDx+mtLSUrKysoGUOHTpEq1atKiz3LDt48KDf8sAwVL9+fQAKCwvLlw0b\nNoz777+f+fPnM336dDZu3MjatWuZM2dO2O8l1hRiRESkTkhNrXkrSW1o1qwZiYmJ7Ny5M2iZ5s2b\ns3v37grLPcvS09NDPm5aWhqDBw9mwYIFTJs2jfnz55OSkoLb7Q55X/FCA3tFRERqUUpKCn379uW1\n116r0KLi0a9fP1asWMHevXv9li9YsICGDRvSp0+fsI49evRodu/ezZIlS1i4cCE33HCD39gap1FL\njIiISC176qmnuOyyy+jduzeTJk2iQ4cO5Ofn88477/Dcc8/xyCOP8O6775KTk8OUKVM466yzWLRo\nEUuWLOHJJ5+kcePGYR23f//+ZGVlMXbsWPLz8xk9enSFMgcOHODjjz8GYMOGDQAsWbKE9PR0WrZs\nyRVXXBH2+440hRgREZFadv7557N69WoeeeQRHnzwQY4dO0ZmZib9+vUjOTmZTp068emnnzJ58mTG\njx9PYWEhXbt25cUXX+T222/321co87q4XC5uv/12pk+fTps2bejXr1+FMl999RW33nqr3zbjxo0D\nICcnhxUrVoT5riNPIUZERCQGOnfuzOLFi4Ou79atG2+99Val+8jJySmfpM5Xu3btyueICTRt2jSm\nTZtW6T6DbRtvFGJEREQkKnJzzQNg377I718hRkRERKLC7TYPgEWLYNWqyO5fVyeJiIiIIynEiIiI\niCMpxIiIiIgjOTHEjAO2AYXAWuCySspmAi8D3wAlwCybMncB/wQOWY8PgF4RrK+IiIhEgdNCzBBM\nEHkcuAATPpYCrYOUrw/ss8p/AZTZlOkLLAJygIuBPGA5cHYE6y0iIiIR5rQQcx/wAjAP07oyEdgJ\njA1SfgcwAVgIHA1SZgQwF/jS2uddmN/LVRGrtYiIiESck0JMMtAD00riazlwSQSP0xBIwnQtiYiI\nSJxyUohJBxKB/IDl+zBjXyLlCWAX8L8R3KeIiIhEmCa78/cAZtxNDlAUrNCECRNIS0vzW+Z2ux19\nO3MREZHS0lJmzZrF0qVL2bhxI0ePHqVt27YMHjyYSZMm0bRp02rtJzc3l1zPVL2WXbuORLy+Tgox\nBzBXGGUELM8A9kRg/78GHgT6AV9VVnD27Nn06NEjAocUERGJHwUFBTz66KMMHTqUMWPG0LJlS9at\nW8e0adN45513WLt2LQ0aNKhyP3Z/2C9atJ4RI3pGtL5OCjFFwDpgAOB7R6z+wBs13PcDwGRr3+tr\nuC8RERFHSk1NJS8vj7POOqt82RVXXEGbNm245ZZbeP311xk+fHgMa+jPSWNiAJ4Cfg7cAXTBXG6d\nhbm6CGAG8NeAbS6wHo2Bltbzrj7r/xt4DBiNubw603o0jMo7EBERATZv3ozb7SYzM5MGDRrQtm1b\nRo4cSVGRGc3w1VdfMXjwYJo1a0ZKSgoXXnghCxYs8NvHxx9/TEJCAq+88goPPfQQ55xzDk2bNqV/\n//5s2bKlvNzEiRNp1KgRx44dq1CPoUOHkpmZSUlJCQkJCX4BxqNXLzN92q5duyL5K6gxp4WYVzGX\nTE8BPsdMdDcQc5k1mPAROGfMeutxITDMev6uz/oxmKuR/gbs9nncH5V3ICIiZ7wvvviCXr16sXr1\nah5//HGWLVvGjBkzKCoq4vTp03zzzTdccsklbNq0iaeffpo33niDrl27MmrUKJ588skK+5s8eTI7\nd+7kL3/5C88//zxbt25l0KBBlJaWAjB69GgKCgp49dVX/bY7cuQIb775JrfddhuJiYlB67tixQoA\nunXrFsHfQs05qTvJY471sHOHzbKqgtq5NauOiIjEg4LTBWw+sDmqx+ic3pnUpNQa7+e+++4jOTmZ\n1atX07x58/Llw4YNA+DRRx+luLiYjz76iHPOOQeAa665hiNHjjB16lTuvvtumjRpUr5dt27d/Fpp\nEhMTufXWW1mzZg29e/eme/fu9OjRg/nz53PnnXeWl8vNzaWoqIg77rA7fRo//PADkyZNolevXlx3\n3XU1fu+R5MQQIyIiUsHmA5vp+XxkB44GWveLdfRoVbMLOwoKCvjHP/7BXXfd5RdgfK1YsYJ+/fqV\nBxiPUaNGsXTpUlauXMmAAQPKl19//fV+5bp37w5AXl4evXv3BkxrzD333MPWrVvJzs4GYP78+fTq\n1YuuXbti59ChQwwcOBCXy8XixYvDe8NRpBAjIiJ1Quf0zqz7xbqoH6OmDh8+TGlpKVlZWUHLHDp0\niFatWlVY7ll28OBBv+WBYah+/foAFBYWli8bNmwY999/P/Pnz2f69Ols3LiRtWvXMmeOfefG4cOH\n6d+/P3v27GHFihW0a9euWu+vNinEiIhInZCalFrjVpLa0KxZMxITE9m5c2fQMs2bN2f37t0VlnuW\npaenh3zctLQ0Bg8ezIIFC5g2bRrz588nJSXFdo6zw4cP85Of/IQdO3bw4Ycfct5554V8vNrgtIG9\nIiIijpaSkkLfvn157bXXKrSoePTr148VK1awd+9ev+ULFiygYcOG9OnTJ6xjjx49mt27d7NkyRIW\nLlzIDTfc4De2BrwBZvv27Sxfvpz/+q//CutYtUEtMSIiIrXsqaee4rLLLqN3795MmjSJDh06kJ+f\nzzvvvMNzzz3HI488wrvvvktOTg5TpkzhrLPOYtGiRSxZsoQnn3ySxo0bh3Xc/v37k5WVxdixY8nP\nz2f06NF+6wsLC7n66qv5v//7P2bPnk1RURErV64sX9+yZUvat29fo/ceSQoxIiIitez8889n9erV\nPPLIIzz44IMcO3aMzMxM+vXrR3JyMp06deLTTz9l8uTJjB8/nsLCQrp27cqLL77I7bff7rcvl8tV\n7eO6XC5uv/12pk+fTps2bejXr5/f+vz8fNauXYvL5eJXv/pVhe1HjRrFvHnzwnvTUaAQIyIiEgOd\nO3eu9Iqfbt268dZbbwVdD5CTk0NJSUmF5e3atSufIybQtGnTmDZtmu26yraLRxoTIyIiIo6kECMi\nIiKOpBAjIiIijqQQIyIiIo6kECMiIiKOpBAjIiIijqQQIyIiIo6kECMiIiKOpBAjIiIijqQQIyIi\nIo6kECMiIiKOpBAjIiISA4sXL6Zbt26kpqaSkJDAl19+WeU2x48f54EHHmDAgAG0aNGChIQEpk6d\nWgu1jU8KMSIiIrVs//793HbbbWRnZ/P++++zcuVKsrOzq9zuwIED/PnPf+b06dPceOONQGh3sa5r\ndBdrERGRWrZlyxaKi4sZPnw4l19+ebW3a9euHYcPHwbg4MGDvPDCC9GqoiOoJUZERKQWjRo1qjy4\nDBkyhISEBK666ioAVq1axaBBg0hPTyclJYWOHTsyceJE2/2UlZXVWp3jlVpiRESkbigogM2bo3uM\nzp0hNbVGu5gyZQq9e/dm/PjxzJgxgyuvvJImTZrw/vvvM2jQILp168asWbNo06YN27Zt44MPPohQ\n5esehRgREakbNm+Gnj2je4x166BHjxrton379nTp0gWA7OxsfvzjHwNw3XXX0a5dO1atWkVycjIA\nffv2ZdSoUTU6Xl2mECMiInVD584mZET7GFGwZcsWvv/+e2bMmFEeYKRqCjEiIlI3pKbWuJUkVvbv\n3w9AVlZWjGviLBrYKyIiEmMtWrQAYOfOnTGuibM4LcSMA7YBhcBa4LJKymYCLwPfACXArCDlbgY2\nAieBr4EbIlVZERGR6ujUqRMdOnRg3rx5FBUVxbo6juGk7qQhmCAyFvg3MAZYCnQF7KJrfWAf8Dhw\nH2B3LdrFwCvAQ8CbwE3Aq5hwtDqy1RcREQnuT3/6E4MGDaJPnz5MnDiR1q1bk5eXx/Lly1m4cGF5\nuaVLl3LixAmOHTsGwNdff83f/vY3AH7605+SkpISk/rHgpNCzH3AC8A86/VE4GpMqJlsU34HMMF6\nfmeQfU4AlgN/sF4/AfS1lg+reZVFRETsBc60O2DAAD755BMee+wxfvnLX3Ly5EmysrIYPHiwX7lx\n48axY8eO8n289tprvPbaa7hcLrZt20abNm1q7T3EmlNCTDLQA5gesHw5cEkN9tsHeMpmn7+qwT5F\nREQqlZOTQ0lJSYXlvXv35r333qt0223btkWrWo7jlDEx6UAikB+wfB9m7Eu4Mm32mV/DfYqIiEgt\ncEqIEREREfHjlO6kA5grjDIClmcAe2qw371B9rm3so0mTJhAWlqa3zK3243b7a5BVUREROqG3Nxc\ncnNz/Zbt2nUk4sdxSogpAtYBA4C3fJb3B96owX4/s/b5R59lAzBXPwU1e/Zsejh0QiUREZFos/vD\nftGi9YwYEdnbQjglxIAZgPsSZn6YlcAvgCxgrrV+BnA2MNJnmwusn42BltbrIsy8MGDCyyfAA8Db\nwGCgH3BptN6EiIiIRIaTQsyrQHNgCtAK2AAMxDtHTCbQOmCb9dbPMszVTcOA7UB7a/lnwFBgGmY+\nmW+BW4E10XgDIiIiEjlOCjEAc6yHnTtsllVn4PLr1kNEREQcRFcniYiIiCMpxIiIiIgjKcSIiIiI\nIynEiIij5ebC9debx4AB8KMfmZ+eZQFTVYjEjcWLF9OtWzdSU1NJSEjgyy+/rHKbDz/8kJEjR9Kp\nUycaNmxIVlYWN9xwA+vXr69y27rIaQN7RUT8uN3mAbB+PfTsaYKLpnKSeLZ//35uu+02Bg4cyNy5\nc6lfvz7Z2dlVbvfcc8+xf/9+Jk6cSLdu3di/fz8zZ86kT58+vP/++1x55ZW1UPv4oRAjIiJSy7Zs\n2UJxcTHDhw/n8ssvr/Z2zzzzDC1btvRbds0119CxY0emT59+xoUYdSeJiIjUolGjRpUHlyFDhpCQ\nkMBVV10FwKpVqxg0aBDp6emkpKTQsWNHJk6cWL5tYIABaNiwIV26dGHXrl218wbiiFpiREREatGU\nKVPo3bs348ePZ8aMGVx55ZU0adKE999/n0GDBtGtWzdmzZpFmzZt2LZtGx988EGl+zt69Cjr16/n\nJz/5SS29g/ihECMiInVCQUkJmwsKonqMzqmppCYm1mgf7du3p0uXLgBkZ2fz4x//GIDrrruOdu3a\nsWrVKpKTkwHo27cvo0aNqnR/48ePp7CwkIceeqhG9XIihRgREakTNhcU0HPduqgeY13PnvRo3Dji\n+92yZQvff/89M2bMKA8w1fHwww/z8ssv88wzz3DhhRdGvF7xTiFGRETqhM6pqazrGdm7JNsdIxr2\n798PQFZWVrW3mTp1Kr/73e+YPn0648aNi0q94p1CjIiI1AmpiYlRaSWpDS1atABg586dVZQ0pk6d\nWv6YNGlSNKsW13R1koiISIx16tSJDh06MG/ePIqKiiot+/jjjzN16lQefvhhHn744VqqYXxSS4yI\niEgc+NOf/sSgQYPo06cPEydOpHXr1uTl5bF8+XIWLlwIwMyZM3nkkUe45pprGDhwICtXrvTbR58+\nfWJR9ZhRiBEREYkBl8vl93rAgAF88sknPPbYY/zyl7/k5MmTZGVlMXjw4PIy7777Li6Xi2XLlrFs\n2bIK+yspKamVuscLhRgREZFalpOTYxs4evfuzXvvvRd0u48++iia1XIcjYkRERERR1KIEREREUdS\niBERERFHUogRERERR1KIEREREUdSiBERERFHUogRERERR9I8MSIiEtc2bdoU6ypINcTic1KIERGR\nuNTYupnjiBEjYlwTCUXjWrwJp0KMiIjEpezsbLZs2cKxY8diXRWppsaNG5OdnV1rx1OIERGRuFWb\nJ0RxHg3sFREREUdyWogZB2wDCoG1wGVVlO8LrLPKfwfcbVPmfmALUADkAU8B9SNUXxEREYkSJ4WY\nIcAs4HHgAuCfwFKgdZDy5wJLgH9Y5acD/wPc5FNmJDANmAJ0Bu4EbgVmRL76IiIiEklOGhNzH/AC\nMM96PRG4GhgLTLYpPwbYbm0H8A1wEfBr4O/Wsl7Av4FXrNd5wGJruYiIiMQxp7TEJAM9gOUBy5cD\nlwTZ5uIg5S8CEq3X7wEX4g0t7YFrgXdrWF8RERGJMqeEmHRM8MgPWL4PyAyyTYZN+XxM61O69Xop\npivpU6AI+BZYAfyh5lUWERGRaHJKiImWG4HfYQb8XogZLzMI+G0sKyUiIiJVc8qYmANACaZ1xVcG\nsCfINnup2EqTARRb+wOYBDyPd5zN10BDa9m0YJWZMGECaWlpfsvcbjdut7vSNyEiInImyM3NJTc3\n12/Zrl2LyeSOAAAgAElEQVRHIn4cp4SYIsyl0gOAt3yW9wfeCLLNZ5hWFV8DgDWYQATg8nnuUeqz\nrsxux7Nnz6ZHjx7VqriIiMiZxu4P+0WL1jNiRM+IHsdJ3UlPAT8H7gC6YC63zgLmWutnAH/1KT8X\naAvMtMqPth7/z6fMm5i5Z4ZgLsnuj7mE+22CBBgRERGJD05piQF4FWiOGYjbCtgADAR2Wusz8Z8z\nZru1fhYwHvgBuBf/lpvfY1pcHscEov2YAPNQlN6DiIiIRIiTQgzAHOth5w6bZZ8AlbVdlWAG9v6u\nhvUSERGRWuak7iQRERGRcgoxIiIi4kgKMSIiIuJICjEiIiLiSAoxIiIi4kjhhJgrgCSb5fWsdSIi\nIiJRF06I+Rg4y2Z5GvBRjWojIiIiUk2R7E5qBpyI4P5EREREggplsjvfmW7nY+5nBGZ6/nrA+Zj7\nFYmIiIhEXSgh5qjP82PASZ/XRZgA8+dIVEpERESkKqGEmFHWz+3Ak6jrSERERGIonHsnPRrpSoiI\niIiEKpyBvZnAQmAP5gaKpT6PkshVTURERCS4cFpi5gNtgMeAvZiBvSIiIiK1KpwQcxlmUrvPI1wX\nERERkWoLpztpF+CKdEVEREREQhFOiPkVMAM4N8J1EREREam2cLqTFgOpwHdAAXDaZ10ZZuZeERER\nEUpKIC8PNmyI/L7DCTETI14LERERcaziYhNUvv0Wtm71//n993D6dNX7CEc4IebFSFdCRERE4ltx\nMezYYR9Utm3zBpWkJGjfHjp2hGuvNT+zs+Hrr+G++yJbp3BCDEBH4A6gPWaMzD7gWiAP+DoyVRMR\nEZHa5AkqgSFl61YTVIqLTbmkJOjQwQSUgQNNSPGEldatoZ5Nuti/P/L1DSfE9AWWAf+ynj+ECTHn\nA3cCP4tY7URERCSiTp/2DyqBLSqeoJKcbFpUsrPhuusqBpXExNi+DwgvxPwe+C0wE3MjSI8VwC8j\nUSkREREJ3+nTsH27fdfP9u3+QcXTojJokDekdOwYP0GlMuGEmPMAt83yA0B6zaojIiIi1XH6tGk5\nCRZUSqwbAdWv7w0qgwf7B5WsrPgPKpUJJ8QcAc4GtgUsvwD4ocY1EhEREQCKikwgsRujsmOHf1Dp\n2NE8brjBv+vnnHOcHVQqE06IeRl4ArjVep2IuRXBTGBBhOolIiJyRigqMi0qdmNUtm+H0lJTrkED\n06KSnQ033VQxqCSEM32tw4UTYn6LuQmk5/YDGzFBZhEwLXJVi1/jxkHLlua5220eIiIiwZw6Fbzr\nZ8cO/6DiaVG5+Wb/rp8zNahUJpwQUwQMB6YAPTC3Lvgc2BLBesW1e++F4cNjXQsREYknp06Zid3s\ngkpenjeopKR4g8ott/gHlbPPVlAJRbjzxIC57cB3kapINY0DfgNkYuajmYC51DuYvsBTQFdgN/AH\n4LmAMmnA74AbgbMwY33uB5ZGsuIiIuJ8J0/6d/34/szLg7IyU84TVLKz4dZb/bt+WrVSUImU6oaY\np4CHgRPALMw9kgK5rOURno+v3BDr2GOBfwNjMEGjK7DTpvy5wBJMaBmGGbfzLLAf+LtVJhn4ANgL\n3IzpImsNHI/SexARkTh38qRpUbEbo+IbVFJTvcFk6NCKQcXliu37OBNUN8RcCCT5PK8sxETLfcAL\nwDzr9UTgakyomWxTfgywHW+o+ga4CPg13hAzGtMS0wewxnjbBiIREalDTp6E776z7/rZudMbVBo2\n9Hb9uN3+XT8KKrFX3RBzpc/znCjUoyrJmPE30wOWLwcuCbLNxdb6wPJ3YgYilwDXAyuBOdbz/Zir\nr34PlEai4iIiEhuFhRWDiuf5rl3+QcUTTIYP9w8qmZkKKvGsJmNialM6JnjkByzfhxkfYyfDpnw+\n5j2nW8/bYwLaQsy9n7IxXU5JwGORqLiIiERPQYF/14/vz127vOUaNfKGk969/bt+MjIUVJyquiHm\nDUxXkedjrqw76aYI1Ku2JGDCzC8wdf8cOAczeFghRkQkDhQUmBYVuzEqgUElO9s8Lr7YG1Q6dlRQ\nqauqG2KO4g0uLsyVPEeBtdbrnkBTTNiJhgOY7p+MgOUZwJ4g2+ylYitNBlBs7Q/MFUtF+IeyzdZ2\n9ayyFcycOYHFi9P8lrndbtyaMEZEJCwFBRUDiufnDz5zwTdu7A0nl17q3/XTsqWCSrzIzc0lNzfX\nb9muXUcifpzqhphRPs9/D7yKGTjrGQxbD9MNczRiNfNXBKwDBgBv+SzvT/Dg9BkwKGDZAGAN3nr/\nG3Plku+g5E6YcGMbYADuv382w4f3CKH6IiJy4kTFoOJ5vnu3t1yTJt5gcvnl/kGlRQsFFSew+8N+\n0aL1jBjRM6LHCWdMzJ2Yy5VLfJYVYy7D/hTTFRMNTwEvYVp/VmK6gLKAudb6GZh7Oo20Xs8F7sHc\nDuEFzEDf0cBQn33Oscr8EXgGMybmQeu1iIiE6Phx/64f3597fNrNPUElO9sEFd8xKunpCipSPeGE\nmESgC6bbxVdnzBiTaHkVaI6ZKbgVsAEYiPeS6EzMHC8e2631s4DxmJtT3ot/y80uzGXas4AvrDKz\nMZPiiYiIjePH7VtTvv3WP6g0beoNKn37+o9RUVCRSAgnxMzHzNXSEdNlA6aVY5K1LprmWA87d9gs\n+wQzXqcyKzH1FxERy7Fjwceo7N3rLZeW5g0nV17p3/XTvLmCikRXOCHmN5hBsxMx42PADK79Pabr\nRkREHOA//wk+RiXfZ4KKs87yBpN+/SoGFZFYCSfElGC6W/6AuSIJojegV0REasATVOzGqOzb5y3X\nrJk3nPTr5z9GpVmz2NVfpDI1nexO4UVEJMaOHg3e9eMbVJo39waT/v39x6goqIgThRtibgFuxQyk\nrY93IrwyzO0BREQkgo4etW9N+fZb2L/fW655c284ufpq/66fs86KXf1FoiGcEPNLzD2M/oq539B8\nzCDfizBzxYiISBiOHKkYUDzPDxzwlktP9waTa6/1BpUOHRRU5MwSTogZh5mj5WXgdszYmO+BxwF9\nfUREKnH4cPAxKgcPesu1aOENJ9de69/1k5YWfP8iZ5JwQkwbzEy3AIVAY+v5S5jLle+JQL1ERBzr\n0KHgY1R8g0rLliaU/OhH8NOf+geVpk2D71/EKXI35JL7lbn9wLYN+6ooHbpwQsxezKRzO4A8zBwr\nXwDt8N4gUkSkTjt0KPgYlUOHvOVatjThpHNnGDTIv+tHQUXqOnd3N+7u5vYD044u4itWRXT/4YSY\njzBjYdZjpvN/CvgZZkzM3yNXNRGR2Ckrsw8qnueHD3vLZmSYYNK1Kwwe7B9UmjSJ3XsQqevCCTF3\n4b29wFzgEHA58Dbe+xiJiMS9sjLTvRNsjMoRn5vuZmaacNKtmwkqvl0/jRsHP4aIRE+oIaYe8BDm\ntgOeexa9aj1EROJOWZm5sifYGBXfoNKqlQkl3bvDjTd6g0qHDgoqIvEo1BBTjLntwF+jUBcRkbB4\ngsoXX5jXzz4LJ054g8pRn2k5W7Uy4eT88+Hmm/27fho1ik39RSQ84XQnfQjkAC9GtCYiIlU4fNgE\nk8DHli3+QeXtt834lAsugFtu8Xb7dOwIDRvGrv4iElnhhJglwBNAd2AtcCJg/ds1rZSInLk8d0/2\nhBPfsOI74ZtnMO1555mun06doLgYhg6FZcugh+YOF6nzwgkxc6yfE4OsTwiyXEQEgMJCb1AJDCt7\n93rLeabQ953wrVMn06Jid9XP+vW19x5EJPbCCTEKKSJSpVOn4Pvv7bt+du3ylmvSxBtOrrzSG1p0\n92QRqUooISYF6Ae8a71+Akj2WV8CPAycjEzVRCTeFRfD9u32XT87dkBpqSmXmuoNJrfdZgKL53WL\nFuDSNJkiEoZQQsxI4Dq8IWY88DXm1gMu4EfAHszkdyJSR5SUwM6d9l0/27aZIANQv773Sp+f/cwb\nUjp1MlcEKaiISKSFEmJGAL8PWDYc+M5n/XgUYkQcp6wMfvjBvuvnu++gqMiUq1cP2rc3weS66/y7\nflq3hgR1NotILQolxHQENvi8PoXpQvJYA3SLRKVEJPLKymDfPvuun2+/hYICUy4hAdq1M8GkXz8Y\nO9YbVNq2NUEmnvjeYG7foZNwzw7GfdaWlt80AMB9nvfeLSJSt4Ty31FToL7P6/SA9QkB60UkBg4e\ntO/62brVXL7s0aaNCSaXXAIjR3q7fs49F5KTg+8/3vjeYG7RivWsOtCTe7vkMvwqXWMtUteFEmJ2\nYeaG+SbI+u5WGRGJsqNH7bt+Am9M6JmdtkcPGDLE26LSoQOkpMSu/iIikRBKiFkCTAXewwzm9ZUK\nPGqtE5EIOHHCdPMEtqZs3Wq6hTxatDDBpEsXuP5675U/HTtqGn0RqdtCCTEzgFuBzcCf8LbIdAbu\nsfY1PaK1E6njTp40A2ftun927/aWS0vzhpP+/f0nfUtLi139RURiKZQQsxe4FHgWE2g8F0yWAR8A\n46wyIuKjqMhcimzX/bNzpxlwC6bVxBNOLr/c/8qf5s11ibKISKBQrzP4HrgGaI65WgngW+BgJCsl\n4jTFxZCXZ9/1s327mWsFzDgUz1wqbrf/pG8ZGQoqIiKhCPdiyYMouMgZprTUTJdv1/Xz/fdw+rQp\nl5xsBs5mZ8MNN/hP+nb22ZpLRUQkUuJsxgeR2Corgz177K/6+e47M4YFIDHRXIqcnQ3XXOPf9dOm\njVkvIiLR5bQQMw74DZCJueXBBOBflZTvi5lBuCuwG/gD8FyQskOBl4G3gBsjVF+JQ2VlcOCAfdfP\n1q3mqiAwXTtt25pg0rcv3HWXN6i0awdJSTF9GyIiZzwnhZghwCxgLPBvYAywFBNQdtqUPxdzWfhz\nwDDgMsyg5P3A3wPKtgOeBP6JGagsdcDhw8EnfTt61FsuK8sEkx//GIYP93b9tG9v7gckIiLxyUkh\n5j7gBWCe9XoicDUm1Ey2KT8G2G5tB+aS8IuAX+MfYhKBRcAU4ApAF6w6yLFjwSd9O+gzaisjw4ST\n88+Hm2/2tqh07GjusCwiIs7jlBCTDPSg4jw0y4FLgmxzsbU+sPydmODiue/TFMyl4fMx3U8SZwoK\nzKRvdl0/e30u6m/e3BtOBg70n/StSZPY1V9ERKLDKSEmHRM88gOW78OMj7GTYVM+H/Oe063nlwGj\ngf+y1peh7qSYOHXKXOFj1/Wzy+dmFk2aeMPJlVf6D6ht1ix29RcRkdrnlBATDY2Bl4C7gEPWMhfe\nSfyCmjlzAosX+/c6ud1u3G7dKbcyp0+bOVPsun7y8swlzGC6dzzjUi6+2D+otGihuVREROJdbm4u\nubm5fsu2bI/87RWdEmIOYLp/MgKWZwB7gmyzl4qtNBlAsbW/7kBb4B2f9Z4ZPE4DnYBtdju+//7Z\nDB+uO+TaKSkxgcRunMr27WZSODADZj2Tvt1yi/+kb61aKaiIiDiZ3R/20+Yu4uGxIyJ6HKeEmCJg\nHTAAcwm0R3/gjSDbfAYMClg2AFiDCUSbgPN81rmAaUAj4FfojtxBlZaa+/rYdf18952ZZh+gXj3v\npG+DBvlP+paVpUnfRESkZpwSYsDM9/ISsBZYCfwCyALmWutnAGcDI63XczE3ppyJuarpYsz4l6HW\n+lPAxoBjeC68DVx+xikrg/x8+66fb7+FQus+5gkJZs6U7Gz4yU9g7FhvWGnb1gQZERGRaHDSKeZV\nzD2bpgCtgA3AQLxzxGQCrX3Kb7fWzwLGAz8A9xK85QbOwIG9Bw8Gn/Tt2DFTxuWC1q1NMLn0Uhg1\nytv9c+65Zpp9ERGR2uakEAMwx3rYucNm2SdAzxD2b7ePCp7YMI7FuS0BcJ/nxt09vgf0Hj1q3/Wz\ndauZEM6jVSsTTnr0gCFDvC0qHTqYGxeKiIjEE6eFmLgwpN29/NY9PNbV8HP8uP9cKr6BZf9+b7kW\nLUww6dIFBg/2n/StUaPY1V9ERCRUCjEOUlhoBs7aXfmzx+carbQ0b3fPgAHewbQdO5p1IiIidYFC\nTJwpKoJt2+y7fnbuNANuwbSaeILK5Zf7z6XSvLkuURYRkbpPISYGiothxw77rp/t272TvqWkeOdS\nGTbMP6hkZCioiIjImU0hJkpKS03LiV3Xz7ZtZvZaMFf2eOZSufFGb9dPdjacfbbmUhEREQlGIaYG\nysrMWBS7rp/vvoOTJ025xERzKXKnTnDttf4tKm3amPUiIiISGoWYMLzy/Dn8ba65GujECbPM5TKT\nu2VnQ9++cNdd3qDSrh0kJcW0yiIiInWOQkwYCk4k0j8HRozwdv+0b2/uByQitSs3P5/cffsA2OY6\nAb3+yhOuEyzesAEAd8uWuDMCb7smInWBQkwYRk/M47djYl0LEQFwZ2SUh5RpK9bwVWobhpQ24Lfd\nu8e4ZiLi+0fGRldhxPevYaMiIiISFe6MDN7u3p23u3dnQFnkuysUYkRERMSRFGJERETEkTQmJgwv\nugpZrUGDIiIiMaUQE4YBZfV5VoMGRUQkjpSWlVJUUlTp41TxqSrLVPkoDW+7/2wviPh7VogREREJ\noqysjOLS4pqf+APDREkEwkTAo6SspMbvt15CPZITk0N6pCalktYgzbxOCF7u7VNf8ikvR+BT8alv\nRPcmIiJSDaVlpZwuOR21E3okg0QkVBYC6ifWDxoOQg0UoTwCj5uUmESCK3pDZXd89ZJCjIiI2Csr\nK6OkrCS8E3qo3Qxhdil4HsWlxTV+v4muxJBP3A3qNaBJ/SYhB4qaPOol1MOlO/ZGhUKMiEgVfFsN\n4qV1INijjLIav9+khCT/E3u9qk/sfsGgki6FkFoKKjluUkISiQm68dyZTiFGRByhuLSY40XH+c+p\n/3Ds1DHzs+iY3/OP8zZB2QmWl7o49H7ziAWJSLQauHBVKwwEnsQb12/sFwxC3Ueoj6SEJLUaiGMo\nxIhI1JwuOc2xomPlwSPY8/JAYrfMel5YXPmU5Q3qNSCBBpCYzNeuZA6cbBz0RN0ouVFkWgpC6HpQ\nq4FI5CnEiIifU8WnKrRw+D6vEEIqWX+y+GSlx0pNSqVxcmMa129Mk/pNyp+f0+QcOid39lvmed6k\nfhMa129c4XlSYhLTVqzh4YQTTCxtyG+v6lVLvzERiRWFGBGHKysr41TJqcpbOAKfFwVfX9XVGA2T\nGtoGibZpbU3g8FlmF0I8zxslN6Jegv4LEpHw6X8QkRgoKyujsLiw+q0dPsHDbn1lYzZcuGiU3Mi2\nNaN9avsqWzh8A0nDpIbqFhGRuKEQI1JNZWVlnDh9IiKtHcdOHat0YqoEV0LQFozMRpmVtnAEhpCG\nyQ2jOveDiEisKMRInVZaVsqJohOVtnBUt7XjeNFxSstKgx4r0ZVo24LRtEFTsppkVdrCERhCUpNS\ndYWIiEgVFGIk7pSUlnC86Hj1Wjt8w4nNsuNFxys9VlJCkm0LxlkNzqJt07bVGlTqWdegXgMFDxGR\nWqQQIxFRXFpcaQtHVZfT+j4/cfpEpceqn1jftgWjRWoL2qe1r7SFIzCE1K9Xv5Z+QyIiEmlODDHj\ngN8AmcDXwATgX5WU7ws8BXQFdgN/AJ7zWX8XcDvQzXq9DpgMrIloreNQ4BweNbmctqo5PFLqpdgO\nGm3VqBWdmnWqdjeLZ+IvERERp4WYIcAsYCzwb2AMsBQTUHbalD8XWIIJLcOAy4Bngf3A360yfYFF\nwKfAKeABYDkm1OyO0vsIm2cOj2pfTlvJ+lMlpyo9VmpSqm0Lhmd8R3Xm7vA816W0IiISaU47s9wH\nvADMs15PBK7GhJrJNuXHANut7QC+AS4Cfo03xIwI2OYu4GfAVcDCmlY4cA6P6rZ2BOuSqWoOj0bJ\njWxbM9qmtaVJctVzd3i2bZTcSJfSiohIXHNSiEkGegDTA5YvBy4Jss3F1vrA8ncCiYDdNa4NgSTg\nULCKfHXgQ578995qX05b1RwewVowWjZsWR48qnNlS6PkRrqUVkTkDGDuWF5GKVDqkJ/f2J5ya8ZJ\nISYdEzzyA5bvw4yPsZNhUz4f877TbdYBPAHsAv43WEX+uXMBG/7V1LYFo1XjVt6QUY0ul9SkVAUP\nEQlLWZycnOx+Ou0EW1pWRkmc1KM6Px0pofKehHA4KcTUhgcw425ygKC/7TEXvsicMbfXVp1E4orn\nxFlsnahKysrKnxdbJ4Jiu+URWF/Vtp+4zNd2mauIw99+W+dPsHWFC0gAElyuav1MdLmqXbamP+sl\nJFS/TrVQn1B+xludJmzO4/mI/IvxclKIOYDp/skIWJ4B7AmyzV4qttJkAMXW/nz9GngQ6Ad8VVlF\nlj47m+uX/M1vmdvtxu12V7aZOIDnBBfJE3I0TubB1tdWkIiFBKCe9R+z30+f5ccwXbebKebgoUMR\nO+nUq6WTZryddBKs32809+8Cza9UB+Xm5pKbm+u37MvtuyJ+HKf9y1mJuQR6vM+yjcAbwEM25Z8A\nBuG9fBpgDnA+cKnPsgcwA4MHAKsrOX4PYN3YOQt4dsxtIVc+lgL/eq7qxBVPf13X5sm+LEafTz2b\nE3JVJ+zAnzXZNtT10dy33ftKdLmqdaLz3MX6cd3FWiTujJv7EnPG3g7QE1gfiX06qSUGzHwvLwFr\nMYHmF0AWMNdaPwM4GxhpvZ4L3APMxFzVdDEwGhjqs8//BqZiLsHOw9tycwywnXVtE8U8v3t3zE+4\nTvjr2XMCCnbiCvekl+RykZKQENL2tXHCDed9JeivUBGRsDgtxLwKNAemAK2ADcBAvHPEZAKtfcpv\nt9bPwrTe/ADci2m58RiDuRrJv38IHgUes6vExwmn+XjLloj89Wy3PiUhoU78dZ2AmolFRCR6nBZi\nwHQHzQmy7g6bZZ9gmq6COTfUCtxd2oC5OTmhbiYiIiIRpGt7w5DguKFEIiIidY9CjIiIiDiSQoyI\niIg4kkKMiIiIOJJCjIiIiDiSQoyIiIg4kkKMiIiIOJJCjIiIiDiSQoyIiIg4kkKMiIiIOJJCjIiI\niDiSQoyIiIg4kkKMiIiIOJJCjIiIiDhSvVhXQEREROqm3FzzANi4q3XE96+WGBEREYkKtxvefts8\nRk3dGfH9qyVGREREoiI3P5/cffsA2Hb4VMT3rxAjIiIiUeHOyMCdkQHAot1fMiLC+1d3koiIiDiS\nQoyIiIg4kkKMiIiIOJLGxIiIo9279g1eO3AIgJNFJVBUxP9LTuaZZV8CcEt6M56+6MZYVlFEokQh\nJgzrtn/N9X/5CwDuZs1w36j/IEVi5emLbuRp6/n69dCzJ6xYBz16xLRaIgJ+E8W03rUt4rtXiAnD\n8IRG/PLOO2NdDREBPr03l8TXzH+SpadL+WdSAaf6p7IqyfSWl9zi5pKn3bGsosgZK/c8yLW+fge+\nAD6P7P4VYkTE0S552g2ekOJpivlATTEi8cDd3Y27u/l+ri9dRM8IX2StEBOGeScW87+5qwFwn+f9\ngERERKT2KMSE4eEWk7jZPTzW1RARETmjKcSEodHnn8CLp6N7EJcruvvXcXSc2jxGbR1nmzVw8P33\n4ZtvzPOyMv+fdssqW6fyzirvpLqeaeV37ybSaul/r4gZB/wGyAS+BiYA/6qkfF/gKaArsBv4A/Bc\nQJmbgceB9sB3wEPAm0H21wNYt856IiISlCe0Bf6s7jKVD7+8k+p6BpVfn5dHzzVrAHoC64kAJ7XE\nDAFmAWOBfwNjgKWYgGJ3a8xzgSWY0DIMuAx4FtgP/N0qczHwCt7gchPwqlV2ddCa/PWvMGxYTd9P\ncL5JNpp0HB2nLr0XgM8/hyuugH/+Ey64oPZPfCIS3KJFMOLMHdh7H/ACMM96PRG4GhNqJtuUHwNs\nt7YD+Aa4CPg13hAzAViOaaEBeALTejMBE3zsJSZCPSf96kTOEA0bmp+pqdCoUWzrIiJR55TbDiRj\nenCWByxfDlwSZJuLg5S/CEi0XvcJcZ8iIiISJ5wSYtIxwSM/YPk+zPgYOxk25fMxrU/p1uvMIGWC\n7VNERETihFNCjIiIiIgfpwzsOACUYFpXfGUAe4Jss5eKLSoZQLG1P08Zu33urawyE2bOJG3xYr9l\nbrcbt1uT3onUOp97s3DyJHTqBJMmQYMGZpnbbR4iUmtyc3PJzc2FH34wD+DIqVMRP46ThtSvBNYB\n432WbQTewFxdFOgJYBDQzWfZHOB84FLr9StAY+CnPmWWAocAu9nszCXWvXvTo2VLs0T/QYqIiFRp\n/fr19OzZE87QS6yfAl4C1mICzS+ALGCutX4GcDYw0no9F7gHmIm5quliYDQw1GeffwQ+AR4A3gYG\nA/3whhx7zz6r+7KIiIjEmJNCzKtAc2AK0ArYAAzEO0dMJtDap/x2a/0sTOvND8C9mJYbj88woWYa\nZsK7b4FbgTVReg8iIiISIU4KMWC6g+YEWXeHzbJPMM1WlXndeoiIiIiD6OokERERcSSFGBEREXEk\nhRgRERFxJIUYERERcSSFGBEREXEkhRgRERFxJIUYERERcSSFGBEREXEkhRgRERFxJIUYERERcSSF\nGBEREXEkhRgRERFxJIUYERERcSSFGBEREXEkhRgRERFxJIUYERERcSSFGBEREXEkhRgRERFxJIUY\nERERcSSFGBEREXEkhRgRERFxJIUYERERcSSFGBEREXEkhRgRERFxJIUYERERcSSFGBEREXEkhRgR\nERFxJIUYERERcSQnhZizgJeAI9ZjAdC0Gts9CvwAFAAfAV0D9vk0sNlavwP4I9AkUpWW+Jabmxvr\nKkiE6TOtW/R5SmWcFGJeBs4HrgauAS7AhJrK/DcwARgP9AL2Ah8Ajaz1ZwOtgPuBbsAoa99/iWzV\nJV7pP8i6R59p3aLPUypTL9YVqKYumPDSG1hjLbsL+AzoBGyx2caFCTC/A960lo0E8oFhwPPA18DP\nfLbZBjwELMQEvNJIvgkRERGJHKe0xFwMHMUbYABWWcsuDrLNuUAGsNxnWRHwD+CSSo6VZu1XAUZE\nRPUvVOsAAAbcSURBVCSOOSXEZAL7bJbvs9YF2wZMy0t1t2kOPAw8F2oFRUREpHbFujvpUWBKFWV6\nReG4ZTbLmgDvAV8BUyvbeNOmTVGoksTCkSNHWL9+fayrIRGkz7Ru0edZd0Tj3OmK+B5D09x6VGYH\nMByYibmayNdhzLiXv9ps1x74FrgQ+MJn+VvAIeAOn2WNgfeB48B1mG4nO60wXVrnVFFnERERqegH\nTOPEnkjsLNYtMQetR1U+w1xO3QvvuJje1rJPg2yzDXM10gC8ISYZ6Av8xqdcE0yAKQSuJ3iAAfNL\n74UJMyIiIhKaPUQowDjNEuD/MOGlD/AlplXF12bgBp/XD2Baa24AzsNcpr0LaGitbwKsxISc9pix\nMp6HU8YLiYiISJxLw8wLc9R6LKDipHSlwO0Byx4BdmNaWgInu8uxtimxfpb6vG4T0dqLiIiIiIiI\niIiIiIiIiIiIiMTOOMyVTYXAWuCyKsr3BdZZ5b8D7o5q7SRUoXyeOfiPjfI8OkW3ilJNVwDvYC7R\nLAUGV2MbfT/jV6ifZw76fsazBzFXD/8HM8nsG1Tvs9F3NIKGAKeA0cCPgFnAMaB1kPLnAieAp6zy\nd1rb3xT1mkp1hPp55mD+U+wAtPR56Eq1+HAN8BjmasNSzJQIldH3M76F+nnmoO9nPFuKubCmC+Zm\nze8A24HUSrbRdzTCVgF/Cli2EZgepPzvMTeR9DWH4HPXSO0K9fPMwfwn2TSKdZLIqM5JT99P5wgl\nxOj76QzpmM+rstbvGn9HlWC9koEe+N8wEut1sBtGXhyk/EVAYkRrJ6EK5/P0+BxzWf7/Yv7jFGfS\n97Nu0vfTGdKsn4cqKVPj76hCjFc65pcWyg0jM2zK52NmQk6PaO0kVOF8nruBuzBNmTcB3wAfUvW4\nKIlP+n7WLfp+OocL033/T0zrdzA1/o7G+rYDIvFki/XwWIkZP/Mb4F8xqZGIeOj76RzPAN2ohYCp\nlhivA5iZejMClmcQ/D4Pe6n4V30GUGztT2InnM/TziogO1KVklql72fdp+9n/HkacyPlKzGtZ5Wp\n8XdUIcarCHOZ14CA5f0JPsjoM2u9rwGYy8xKIlo7CVU4n6edC6n6iyjxSd/Puk/fz/jhwrTA3ABc\nBeyoxjb6jkbYrZjLu+7AXCY2C3PNu+eS3BnAX33KtwOOAzOt8qOt7W+snepKFUL9PCdg5qrIxjSF\nzsCMrve9qajETkPgAutRivm8LkDfT6cK9fPU9zO+PYu54fIV+N9MuYFPGX1Ha8FYzORoJzFp0LdP\nbz6wIqD8FZi/+E9iJur5RS3UUaovlM/zN5g+9wLgIPAPzFwWEh9y8L9Jq+f5PGu9vp/OkkNon6e+\nn/HN7mbKgTdl1ndURERERERERERERERERERERERERERERERERERERERERERERERERERERCQelQLX\nx7oSIlIzugGkiNS2F6k4NXkpsCSGdRIRB6oX6wqIyBmnDFiKuTGnr1MxqIuIOJhaYkSktrkwgWVf\nwOOotb70/7d3765RBVEAxj/LaKOIr0bBt0bxUSlW4gMUtRKtFBEUBQUbq1T6FwgxqIVmEayCL2xU\n0NLtRAQTbIIIEcSooGRTRDYWZ5YdL1l3Q8Bl4/eDhTt72Nl7u8OcM3eAc0SiUwGGgaOFOTYTB8lV\ngFHgFnEqcu408I44WO4T0FuILwIeAmPEwYKHs9gC4F66r0qKn5rmc0qSpFmmRCQPjVSBL0QSshq4\nCkwA61N8HpGUDAAbgd3E6bf92RznieTjIrAK2AZcKPzHR+A4sBK4BvwA5qf4deA1sB1YDuwBDk3z\nOSVJ0ixTIpKSn4VPT4pXgb7Cb8rZd2eAr0BXFj8A/CJWVwBGiOSnkSpwJRvPTd/tT+PHwO1WHkZS\n+9gTI6kdXhKrJblv2XW5ECsDW9P1BuANMJ7FXxHl8XVEuWoZ8KLJPbzNrivESsziNL4B3CdWYp4D\nj6a4J0ltZhIjqR1qvS6tmkM0BOfjRsb/EstNFMaT1PsEnwIrgIPAPiIh6gMutzi3pH/Axl5J7TDZ\nJL6zMN4BDKXrQWALUQKq2UWUg94TpakPwN4Z3uMocBc4AVwCzs5wPkmS1OFKxDthlgBLs8/CFK8C\nn4kt2GuJ3pW8sbeL6HkZALqpN/beyf7jJPXG3jVEWajY2Ft82d339DuIfpojRGNxN/AEy0mSJP33\n+pn6ZXeDKV7bYv2MKA0NA8cKc2wiSjy1LdY3+XNlBmLlZIjYzj1C7ECqaZbE9BDbs8fS/A+I8pIk\nSVJDHgkgqSX2xEiSpI5kEiNJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJUsf6Deqt\nX+Rn0sLqAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f19a8a9e690>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.arange(epochs)\n",
    "plt.errorbar(x,mean_gradients[0,:],std_gradients[0,:])\n",
    "plt.hold(True)\n",
    "plt.errorbar(x,mean_gradients[2,:],std_gradients[2,:])\n",
    "plt.errorbar(x,mean_gradients[4,:],std_gradients[4,:])\n",
    "plt.errorbar(x,mean_gradients[6,:],std_gradients[6,:])\n",
    "plt.ylabel('Gradient')\n",
    "plt.xlabel('Epochs')\n",
    "plt.title('Weights Gradient by Layer')\n",
    "plt.legend([\"conv1\", \"conv2\",\"fc1\",\"fc2\"])\n",
    "plt.hold(False)\n",
    "plt.show()\n",
    "plt.errorbar(x,mean_gradients[1,:],std_gradients[1,:])\n",
    "plt.hold(True)\n",
    "plt.errorbar(x,mean_gradients[3,:],std_gradients[3,:])\n",
    "plt.errorbar(x,mean_gradients[5,:],std_gradients[5,:])\n",
    "plt.errorbar(x,mean_gradients[7,:],std_gradients[7,:])\n",
    "plt.ylabel('Gradient')\n",
    "plt.xlabel('Epochs')\n",
    "plt.title('Biases Gradient by Layer')\n",
    "plt.legend([\"conv1\", \"conv2\",\"fc1\",\"fc2\"])\n",
    "plt.hold(False)\n",
    "plt.show()"
=======
    "        print \"Time elapsed\", (time.time()-t_i)/60.0, \"minutes\""
>>>>>>> 890393554e67c51b1bad4263c9757fdec54296d8
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
<<<<<<< HEAD
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
=======
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
>>>>>>> 890393554e67c51b1bad4263c9757fdec54296d8
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
